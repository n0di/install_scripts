# show config files postgres
sudo -u postgres psql -c "show config_file;"

#======================= edit pg_hba.conf ==================================
# add to end file 
# host    all             new_pg_user      0.0.0.0/32              md5

#======================= edit postgresql.conf ==============================

# 1. Основные настройки памяти
#   1.1. shared_buffers
#   Описание: Этот параметр задает размер памяти, используемой для хранения данных и индексов. Чем больше значение, тем больше данных PostgreSQL сможет удерживать в памяти, что улучшит производительность.
#   Рекомендация: Установите значение на уровне 25-40% от общей оперативной памяти сервера.
shared_buffers = 8GB

  # 1.2. work_mem
  # Описание: Память, выделяемая на каждый запрос для операций сортировки, хеширования и создания временных таблиц. Увеличение этого параметра ускоряет выполнение сложных запросов, но учитывайте, что это значение применяется к каждому потоку и может значительно потреблять память при параллельных запросах.
  # Рекомендация: Установите значение исходя из типов запросов и предполагаемого количества параллельных соединений. Например:
work_mem = 16MB

  # 1.3. maintenance_work_mem
  # Описание: Память, используемая для задач обслуживания, таких как VACUUM, CREATE INDEX, и ALTER TABLE.
  # Рекомендация: Для вашего сервера можно установить:
maintenance_work_mem = 2GB

  # 1.4. effective_cache_size
  # Описание: Этот параметр указывает PostgreSQL ожидаемый размер кеша, доступный для хранения данных в памяти (включая кэш ОС). Он влияет на планировщик запросов и помогает ему оценивать, какие планы лучше использовать.
  # Рекомендация: Установите значение на уровне 50-75% от общей оперативной памяти:
effective_cache_size = 24GB

2. Настройки процессоров и параллельных запросов
  # 2.1. max_parallel_workers_per_gather
  # Описание: Определяет максимальное количество параллельных рабочих процессов для выполнения запроса.
  # Рекомендация: Для многопроцессорного сервера:
max_parallel_workers_per_gather = 4

  # 2.2. max_parallel_workers
  # Описание: Общий лимит на количество параллельных рабочих процессов, используемых всеми запросами.
  # Рекомендация: Установите значение исходя из количества доступных CPU:
max_parallel_workers = 16

  # 2.3. max_worker_processes
  # Описание: Определяет общее количество рабочих процессов, включая параллельные запросы, autovacuum, и фоновые рабочие процессы.
  # Рекомендация: Установите значение на уровне числа доступных CPU:
max_worker_processes = 32

3. Настройки для WAL (Write-Ahead Logging)
  # 3.1. wal_level
  # Описание: Определяет объем информации, сохраняемой в WAL. Важно для репликации и восстановления данных.
  # Рекомендация: Для обеспечения надежности и возможности репликации:
wal_level = replica
  # 3.2. wal_buffers
  # Описание: Размер памяти, выделяемой для буферизации WAL-записей перед их записью на диск.
  # Рекомендация: Увеличьте значение для большого объема операций записи:
wal_buffers = 16MB

  # 3.3. checkpoint_completion_target
  # Описание: Указывает, какую часть времени между контрольными точками следует использовать для записи данных. Увеличение этого значения снижает нагрузку на систему во время контрольных точек.
  # Рекомендация:
checkpoint_completion_target = 0.9

  # 3.4. checkpoint_timeout
  # Описание: Определяет интервал времени между контрольными точками. Более частые контрольные точки снижают время восстановления после сбоя, но увеличивают нагрузку на диск.
  # Рекомендация:
checkpoint_timeout = 15min

  # 3.5. checkpoint_segments (или min_wal_size/max_wal_size в новых версиях)
  # Описание: Регулирует количество сегментов WAL, хранящихся на диске между контрольными точками.
  # Рекомендация: Для уменьшения количества контрольных точек и улучшения производительности:
max_wal_size = 4GB

# 4. Настройки подключения и управление соединениями
  # 4.1. max_connections
  # Описание: Максимальное количество одновременно активных соединений.
  # Рекомендация: Увеличьте значение, но учитывайте память и возможность использования пула соединений (например, PgBouncer):
max_connections = 500

  # 4.2. listen_addresses
  # Описание: Указывает, на каких IP-адресах сервер будет слушать подключения.
  # Рекомендация: Убедитесь, что сервер слушает только на нужных интерфейсах для безопасности:

# listen_addresses = 'localhost,192.168.1.100'

  # 4.3. connection_limits
  # Описание: Настройки ограничения соединений на уровне ролей или баз данных.
  # Рекомендация: Используйте для предотвращения переполнения сервера соединениями.
  
# 5. Настройки autovacuum и управления сбором мусора
  # 5.1. autovacuum_max_workers
  # Описание: Количество процессов autovacuum, которые могут одновременно работать.
  # Рекомендация: Увеличьте значение для больших баз данных:
autovacuum_max_workers = 6

  # 5.2. autovacuum_vacuum_cost_limit и autovacuum_vacuum_cost_delay
  # Описание: Эти параметры контролируют ресурсы, выделяемые на autovacuum. Увеличение лимита и уменьшение задержки ускорят процесс.
  # Рекомендация:
autovacuum_vacuum_cost_limit = 2000
autovacuum_vacuum_cost_delay = 5ms

  # 5.3. autovacuum_naptime
  # Описание: Интервал времени между запусками autovacuum.
  # Рекомендация: Уменьшите значение для более частого выполнения:
autovacuum_naptime = 10s

# 6. Настройки журналирования и мониторинга
  # 6.1. logging_collector
  # Описание: Включает сбор логов в отдельные файлы.
  # Рекомендация: Включите для более детального мониторинга:
logging_collector = on

  # 6.2. log_min_duration_statement
  # Описание: Определяет минимальное время выполнения запроса, которое будет логироваться. Полезно для выявления медленных запросов.
  # Рекомендация: Установите значение в зависимости от ваших требований:
log_min_duration_statement = 500ms

  # 6.3. log_checkpoints
  # Описание: Логирует контрольные точки, что помогает анализировать производительность.
  # Рекомендация: Включите для мониторинга:
log_checkpoints = on

  # 6.4. log_connections и log_disconnections
  # Описание: Логирование подключений и отключений пользователей.
  # Рекомендация: Включите для отслеживания активности:
log_connections = on
log_disconnections = on

# 7. Настройки операционной системы
  # 7.1. Параметры ядра Linux
  # vm.swappiness: Рекомендуется уменьшить значение для предотвращения агрессивного использования свопа:
sysctl vm.swappiness=10

echo -e "\n* soft nproc 262140\n* hard nproc 262140\n* soft nofile 262140\n* hard nofile 262140\nroot soft nofile 262140\nroot hard nofile 262140\nroot soft nproc 262140\nroot hard nproc 262140" >> /etc/security/limits.conf 
ulimit -n 262140
echo "vm.swappiness=10" >> /etc/sysctl.conf

# fs.file-max: Увеличьте максимальное количество открытых файлов:
sysctl fs.file-max=500000

  # 7.2. Параметры файловой системы
  # Используйте файловую систему, оптимизированную для работы с PostgreSQL, например ext4 или xfs.
  # Монтажные опции: Используйте опции noatime и nodiratime, чтобы уменьшить нагрузку на диск:

# mount -o noatime,nodiratime /dev/sda1 /var/lib/postgresql/data

# 8. Тестирование и оптимизация
# Тестирование производительности: Используйте инструменты типа pgbench, чтобы проверить производительность после внесения изменений.
# Мониторинг производительности: Регулярно отслеживайте метрики системы и базы данных, используя такие инструменты, как pg_stat_statements, pgBadger, Prometheus, и Grafana.
# Эти рекомендации должны быть адаптированы под конкретные потребности вашего проекта и условия эксплуатации. Оптимальная настройка требует тестирования и анализа, чтобы обеспечить баланс между производительностью, устойчивостью и доступностью базы данных.
